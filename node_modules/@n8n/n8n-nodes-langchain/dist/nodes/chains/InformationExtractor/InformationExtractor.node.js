"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InformationExtractor = void 0;
const messages_1 = require("@langchain/core/messages");
const prompts_1 = require("@langchain/core/prompts");
const output_parsers_1 = require("langchain/output_parsers");
const n8n_workflow_1 = require("n8n-workflow");
const descriptions_1 = require("../../../utils/descriptions");
const schemaParsing_1 = require("../../../utils/schemaParsing");
const tracing_1 = require("../../../utils/tracing");
const helpers_1 = require("./helpers");
const SYSTEM_PROMPT_TEMPLATE = `You are an expert extraction algorithm.
Only extract relevant information from the text.
If you do not know the value of an attribute asked to extract, you may omit the attribute's value.`;
class InformationExtractor {
    constructor() {
        this.description = {
            displayName: 'Information Extractor',
            name: 'informationExtractor',
            icon: 'fa:project-diagram',
            iconColor: 'black',
            group: ['transform'],
            version: 1,
            description: 'Extract information from text in a structured format',
            codex: {
                alias: ['NER', 'parse', 'parsing', 'JSON', 'data extraction', 'structured'],
                categories: ['AI'],
                subcategories: {
                    AI: ['Chains', 'Root Nodes'],
                },
                resources: {
                    primaryDocumentation: [
                        {
                            url: 'https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.information-extractor/',
                        },
                    ],
                },
            },
            defaults: {
                name: 'Information Extractor',
            },
            inputs: [
                { displayName: '', type: "main" },
                {
                    displayName: 'Model',
                    maxConnections: 1,
                    type: "ai_languageModel",
                    required: true,
                },
            ],
            outputs: ["main"],
            properties: [
                {
                    displayName: 'Text',
                    name: 'text',
                    type: 'string',
                    default: '',
                    description: 'The text to extract information from',
                    typeOptions: {
                        rows: 2,
                    },
                },
                {
                    ...descriptions_1.schemaTypeField,
                    description: 'How to specify the schema for the desired output',
                    options: [
                        {
                            name: 'From Attribute Descriptions',
                            value: 'fromAttributes',
                            description: 'Extract specific attributes from the text based on types and descriptions',
                        },
                        ...descriptions_1.schemaTypeField.options,
                    ],
                    default: 'fromAttributes',
                },
                {
                    ...descriptions_1.jsonSchemaExampleField,
                    default: `{
	"state": "California",
	"cities": ["Los Angeles", "San Francisco", "San Diego"]
}`,
                },
                {
                    ...descriptions_1.inputSchemaField,
                    default: `{
	"type": "object",
	"properties": {
		"state": {
			"type": "string"
		},
		"cities": {
			"type": "array",
			"items": {
				"type": "string"
			}
		}
	}
}`,
                },
                {
                    displayName: 'The schema has to be defined in the <a target="_blank" href="https://json-schema.org/">JSON Schema</a> format. Look at <a target="_blank" href="https://json-schema.org/learn/miscellaneous-examples.html">this</a> page for examples.',
                    name: 'notice',
                    type: 'notice',
                    default: '',
                    displayOptions: {
                        show: {
                            schemaType: ['manual'],
                        },
                    },
                },
                {
                    displayName: 'Attributes',
                    name: 'attributes',
                    placeholder: 'Add Attribute',
                    type: 'fixedCollection',
                    default: {},
                    displayOptions: {
                        show: {
                            schemaType: ['fromAttributes'],
                        },
                    },
                    typeOptions: {
                        multipleValues: true,
                    },
                    options: [
                        {
                            name: 'attributes',
                            displayName: 'Attribute List',
                            values: [
                                {
                                    displayName: 'Name',
                                    name: 'name',
                                    type: 'string',
                                    default: '',
                                    description: 'Attribute to extract',
                                    placeholder: 'e.g. company_name',
                                    required: true,
                                },
                                {
                                    displayName: 'Type',
                                    name: 'type',
                                    type: 'options',
                                    description: 'Data type of the attribute',
                                    required: true,
                                    options: [
                                        {
                                            name: 'Boolean',
                                            value: 'boolean',
                                        },
                                        {
                                            name: 'Date',
                                            value: 'date',
                                        },
                                        {
                                            name: 'Number',
                                            value: 'number',
                                        },
                                        {
                                            name: 'String',
                                            value: 'string',
                                        },
                                    ],
                                    default: 'string',
                                },
                                {
                                    displayName: 'Description',
                                    name: 'description',
                                    type: 'string',
                                    default: '',
                                    description: 'Describe your attribute',
                                    placeholder: 'Add description for the attribute',
                                    required: true,
                                },
                                {
                                    displayName: 'Required',
                                    name: 'required',
                                    type: 'boolean',
                                    default: false,
                                    description: 'Whether attribute is required',
                                    required: true,
                                },
                            ],
                        },
                    ],
                },
                {
                    displayName: 'Options',
                    name: 'options',
                    type: 'collection',
                    default: {},
                    placeholder: 'Add Option',
                    options: [
                        {
                            displayName: 'System Prompt Template',
                            name: 'systemPromptTemplate',
                            type: 'string',
                            default: SYSTEM_PROMPT_TEMPLATE,
                            description: 'String to use directly as the system prompt template',
                            typeOptions: {
                                rows: 6,
                            },
                        },
                    ],
                },
            ],
        };
    }
    async execute() {
        const items = this.getInputData();
        const llm = (await this.getInputConnectionData("ai_languageModel", 0));
        const schemaType = this.getNodeParameter('schemaType', 0, '');
        let parser;
        if (schemaType === 'fromAttributes') {
            const attributes = this.getNodeParameter('attributes.attributes', 0, []);
            if (attributes.length === 0) {
                throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'At least one attribute must be specified');
            }
            parser = output_parsers_1.OutputFixingParser.fromLLM(llm, output_parsers_1.StructuredOutputParser.fromZodSchema((0, helpers_1.makeZodSchemaFromAttributes)(attributes)));
        }
        else {
            let jsonSchema;
            if (schemaType === 'fromJson') {
                const jsonExample = this.getNodeParameter('jsonSchemaExample', 0, '');
                jsonSchema = (0, schemaParsing_1.generateSchema)(jsonExample);
            }
            else {
                const inputSchema = this.getNodeParameter('inputSchema', 0, '');
                jsonSchema = (0, n8n_workflow_1.jsonParse)(inputSchema);
            }
            const zodSchema = (0, schemaParsing_1.convertJsonSchemaToZod)(jsonSchema);
            parser = output_parsers_1.OutputFixingParser.fromLLM(llm, output_parsers_1.StructuredOutputParser.fromZodSchema(zodSchema));
        }
        const resultData = [];
        for (let itemIndex = 0; itemIndex < items.length; itemIndex++) {
            const input = this.getNodeParameter('text', itemIndex);
            const inputPrompt = new messages_1.HumanMessage(input);
            const options = this.getNodeParameter('options', itemIndex, {});
            const systemPromptTemplate = prompts_1.SystemMessagePromptTemplate.fromTemplate(`${options.systemPromptTemplate ?? SYSTEM_PROMPT_TEMPLATE}
{format_instructions}`);
            const messages = [
                await systemPromptTemplate.format({
                    format_instructions: parser.getFormatInstructions(),
                }),
                inputPrompt,
            ];
            const prompt = prompts_1.ChatPromptTemplate.fromMessages(messages);
            const chain = prompt.pipe(llm).pipe(parser).withConfig((0, tracing_1.getTracingConfig)(this));
            try {
                const output = await chain.invoke(messages);
                resultData.push({ json: { output } });
            }
            catch (error) {
                if (this.continueOnFail()) {
                    resultData.push({ json: { error: error.message }, pairedItem: { item: itemIndex } });
                    continue;
                }
                throw error;
            }
        }
        return [resultData];
    }
}
exports.InformationExtractor = InformationExtractor;
//# sourceMappingURL=InformationExtractor.node.js.map