"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractParsedOutput = extractParsedOutput;
exports.checkForStructuredTools = checkForStructuredTools;
const n8n_workflow_1 = require("n8n-workflow");
async function extractParsedOutput(ctx, outputParser, output) {
    const parsedOutput = (await outputParser.parse(output));
    if (ctx.getNode().typeVersion <= 1.6) {
        return parsedOutput;
    }
    return parsedOutput?.output ?? parsedOutput;
}
async function checkForStructuredTools(tools, node, currentAgentType) {
    const dynamicStructuredTools = tools.filter((tool) => tool.constructor.name === 'DynamicStructuredTool');
    if (dynamicStructuredTools.length > 0) {
        const getToolName = (tool) => `"${tool.name}"`;
        throw new n8n_workflow_1.NodeOperationError(node, `The selected tools are not supported by "${currentAgentType}", please use "Tools Agent" instead`, {
            itemIndex: 0,
            description: `Incompatible connected tools: ${dynamicStructuredTools.map(getToolName).join(', ')}`,
        });
    }
}
//# sourceMappingURL=utils.js.map