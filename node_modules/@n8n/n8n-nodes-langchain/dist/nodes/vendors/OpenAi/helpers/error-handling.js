"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.openAiFailedAttemptHandler = void 0;
exports.getCustomErrorMessage = getCustomErrorMessage;
exports.isOpenAiError = isOpenAiError;
const n8n_workflow_1 = require("n8n-workflow");
const openai_1 = require("openai");
const error_1 = require("openai/error");
const errorMap = {
    insufficient_quota: 'Insufficient quota detected. <a href="https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-langchain.openai/common-issues/#insufficient-quota" target="_blank">Learn more</a> about resolving this issue',
    rate_limit_exceeded: 'OpenAI: Rate limit reached',
};
function getCustomErrorMessage(errorCode) {
    return errorMap[errorCode];
}
function isOpenAiError(error) {
    return error instanceof error_1.OpenAIError;
}
const openAiFailedAttemptHandler = (error) => {
    if (error instanceof openai_1.RateLimitError) {
        const errorCode = error?.code;
        const errorMessage = getCustomErrorMessage(errorCode ?? 'rate_limit_exceeded') ?? errorMap.rate_limit_exceeded;
        throw new n8n_workflow_1.OperationalError(errorMessage, { cause: error });
    }
};
exports.openAiFailedAttemptHandler = openAiFailedAttemptHandler;
//# sourceMappingURL=error-handling.js.map