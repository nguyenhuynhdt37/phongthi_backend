"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OutputParserStructured = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const descriptions_1 = require("../../../utils/descriptions");
const N8nOutputParser_1 = require("../../../utils/output_parsers/N8nOutputParser");
const schemaParsing_1 = require("../../../utils/schemaParsing");
const sharedFields_1 = require("../../../utils/sharedFields");
class OutputParserStructured {
    constructor() {
        this.description = {
            displayName: 'Structured Output Parser',
            name: 'outputParserStructured',
            icon: 'fa:code',
            iconColor: 'black',
            group: ['transform'],
            version: [1, 1.1, 1.2],
            defaultVersion: 1.2,
            description: 'Return data in a defined JSON format',
            defaults: {
                name: 'Structured Output Parser',
            },
            codex: {
                alias: ['json', 'zod'],
                categories: ['AI'],
                subcategories: {
                    AI: ['Output Parsers'],
                },
                resources: {
                    primaryDocumentation: [
                        {
                            url: 'https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.outputparserstructured/',
                        },
                    ],
                },
            },
            inputs: [],
            outputs: ["ai_outputParser"],
            outputNames: ['Output Parser'],
            properties: [
                (0, sharedFields_1.getConnectionHintNoticeField)(["ai_chain", "ai_agent"]),
                { ...descriptions_1.schemaTypeField, displayOptions: { show: { '@version': [{ _cnd: { gte: 1.2 } }] } } },
                {
                    ...descriptions_1.jsonSchemaExampleField,
                    default: `{
	"state": "California",
	"cities": ["Los Angeles", "San Francisco", "San Diego"]
}`,
                },
                {
                    ...descriptions_1.inputSchemaField,
                    default: `{
	"type": "object",
	"properties": {
		"state": {
			"type": "string"
		},
		"cities": {
			"type": "array",
			"items": {
				"type": "string"
			}
		}
	}
}`,
                },
                {
                    displayName: 'JSON Schema',
                    name: 'jsonSchema',
                    type: 'json',
                    description: 'JSON Schema to structure and validate the output against',
                    default: `{
  "type": "object",
  "properties": {
    "state": {
      "type": "string"
    },
    "cities": {
      "type": "array",
      "items": {
        "type": "string"
      }
    }
  }
}`,
                    typeOptions: {
                        rows: 10,
                    },
                    required: true,
                    displayOptions: {
                        show: {
                            '@version': [{ _cnd: { lte: 1.1 } }],
                        },
                    },
                },
                {
                    displayName: 'The schema has to be defined in the <a target="_blank" href="https://json-schema.org/">JSON Schema</a> format. Look at <a target="_blank" href="https://json-schema.org/learn/miscellaneous-examples.html">this</a> page for examples.',
                    name: 'notice',
                    type: 'notice',
                    default: '',
                    displayOptions: {
                        hide: {
                            schemaType: ['fromJson'],
                        },
                    },
                },
            ],
        };
    }
    async supplyData(itemIndex) {
        const schemaType = this.getNodeParameter('schemaType', itemIndex, '');
        const jsonExample = this.getNodeParameter('jsonSchemaExample', itemIndex, '');
        let inputSchema;
        if (this.getNode().typeVersion <= 1.1) {
            inputSchema = this.getNodeParameter('jsonSchema', itemIndex, '');
        }
        else {
            inputSchema = this.getNodeParameter('inputSchema', itemIndex, '');
        }
        const jsonSchema = schemaType === 'fromJson' ? (0, schemaParsing_1.generateSchema)(jsonExample) : (0, n8n_workflow_1.jsonParse)(inputSchema);
        const zodSchema = (0, schemaParsing_1.convertJsonSchemaToZod)(jsonSchema);
        const nodeVersion = this.getNode().typeVersion;
        try {
            const parser = await N8nOutputParser_1.N8nStructuredOutputParser.fromZodJsonSchema(zodSchema, nodeVersion, this);
            return {
                response: parser,
            };
        }
        catch (error) {
            throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'Error during parsing of JSON Schema.');
        }
    }
}
exports.OutputParserStructured = OutputParserStructured;
//# sourceMappingURL=OutputParserStructured.node.js.map