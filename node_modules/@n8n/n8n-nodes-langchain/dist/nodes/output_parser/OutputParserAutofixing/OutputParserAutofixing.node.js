"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OutputParserAutofixing = void 0;
const prompts_1 = require("@langchain/core/prompts");
const n8n_workflow_1 = require("n8n-workflow");
const N8nOutputParser_1 = require("../../../utils/output_parsers/N8nOutputParser");
const sharedFields_1 = require("../../../utils/sharedFields");
const prompt_1 = require("./prompt");
class OutputParserAutofixing {
    constructor() {
        this.description = {
            displayName: 'Auto-fixing Output Parser',
            name: 'outputParserAutofixing',
            icon: 'fa:tools',
            iconColor: 'black',
            group: ['transform'],
            version: 1,
            description: 'Automatically fix the output if it is not in the correct format',
            defaults: {
                name: 'Auto-fixing Output Parser',
            },
            codex: {
                categories: ['AI'],
                subcategories: {
                    AI: ['Output Parsers'],
                },
                resources: {
                    primaryDocumentation: [
                        {
                            url: 'https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.outputparserautofixing/',
                        },
                    ],
                },
            },
            inputs: [
                {
                    displayName: 'Model',
                    maxConnections: 1,
                    type: "ai_languageModel",
                    required: true,
                },
                {
                    displayName: 'Output Parser',
                    maxConnections: 1,
                    required: true,
                    type: "ai_outputParser",
                },
            ],
            outputs: ["ai_outputParser"],
            outputNames: ['Output Parser'],
            properties: [
                {
                    displayName: 'This node wraps another output parser. If the first one fails it calls an LLM to fix the format',
                    name: 'info',
                    type: 'notice',
                    default: '',
                },
                (0, sharedFields_1.getConnectionHintNoticeField)(["ai_chain", "ai_agent"]),
                {
                    displayName: 'Options',
                    name: 'options',
                    type: 'collection',
                    placeholder: 'Add Option',
                    default: {},
                    options: [
                        {
                            displayName: 'Retry Prompt',
                            name: 'prompt',
                            type: 'string',
                            default: prompt_1.NAIVE_FIX_PROMPT,
                            typeOptions: {
                                rows: 10,
                            },
                            hint: 'Should include "{error}", "{instructions}", and "{completion}" placeholders',
                            description: 'Prompt template used for fixing the output. Uses placeholders: "{instructions}" for parsing rules, "{completion}" for the failed attempt, and "{error}" for the validation error message.',
                        },
                    ],
                },
            ],
        };
    }
    async supplyData(itemIndex) {
        const model = (await this.getInputConnectionData("ai_languageModel", itemIndex));
        const outputParser = (await this.getInputConnectionData("ai_outputParser", itemIndex));
        const prompt = this.getNodeParameter('options.prompt', itemIndex, prompt_1.NAIVE_FIX_PROMPT);
        if (prompt.length === 0 || !prompt.includes('{error}')) {
            throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'Auto-fixing parser prompt has to contain {error} placeholder');
        }
        const parser = new N8nOutputParser_1.N8nOutputFixingParser(this, model, outputParser, prompts_1.PromptTemplate.fromTemplate(prompt));
        return {
            response: parser,
        };
    }
}
exports.OutputParserAutofixing = OutputParserAutofixing;
//# sourceMappingURL=OutputParserAutofixing.node.js.map