"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OutputParserItemList = void 0;
const N8nItemListOutputParser_1 = require("../../../utils/output_parsers/N8nItemListOutputParser");
const sharedFields_1 = require("../../../utils/sharedFields");
class OutputParserItemList {
    constructor() {
        this.description = {
            displayName: 'Item List Output Parser',
            name: 'outputParserItemList',
            icon: 'fa:bars',
            iconColor: 'black',
            group: ['transform'],
            version: 1,
            description: 'Return the results as separate items',
            defaults: {
                name: 'Item List Output Parser',
            },
            codex: {
                categories: ['AI'],
                subcategories: {
                    AI: ['Output Parsers'],
                },
                resources: {
                    primaryDocumentation: [
                        {
                            url: 'https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.outputparseritemlist/',
                        },
                    ],
                },
            },
            inputs: [],
            outputs: ["ai_outputParser"],
            outputNames: ['Output Parser'],
            properties: [
                (0, sharedFields_1.getConnectionHintNoticeField)(["ai_chain", "ai_agent"]),
                {
                    displayName: 'Options',
                    name: 'options',
                    type: 'collection',
                    placeholder: 'Add Option',
                    default: {},
                    options: [
                        {
                            displayName: 'Number Of Items',
                            name: 'numberOfItems',
                            type: 'number',
                            default: -1,
                            description: 'Defines how many items should be returned maximally. If set to -1, there is no limit.',
                        },
                        {
                            displayName: 'Separator',
                            name: 'separator',
                            type: 'string',
                            default: '\\n',
                            description: 'Defines the separator that should be used to split the results into separate items. Defaults to a new line but can be changed depending on the data that should be returned.',
                        },
                    ],
                },
            ],
        };
    }
    async supplyData(itemIndex) {
        const options = this.getNodeParameter('options', itemIndex, {});
        const parser = new N8nItemListOutputParser_1.N8nItemListOutputParser(options);
        return {
            response: parser,
        };
    }
}
exports.OutputParserItemList = OutputParserItemList;
//# sourceMappingURL=OutputParserItemList.node.js.map