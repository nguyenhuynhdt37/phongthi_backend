"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LmChatGoogleGemini = void 0;
const google_genai_1 = require("@langchain/google-genai");
const sharedFields_1 = require("../../../utils/sharedFields");
const additional_options_1 = require("../gemini-common/additional-options");
const n8nLlmFailedAttemptHandler_1 = require("../n8nLlmFailedAttemptHandler");
const N8nLlmTracing_1 = require("../N8nLlmTracing");
function errorDescriptionMapper(error) {
    if (error.description?.includes('properties: should be non-empty for OBJECT type')) {
        return 'Google Gemini requires at least one <a href="https://docs.n8n.io/advanced-ai/examples/using-the-fromai-function/" target="_blank">dynamic parameter</a> when using tools';
    }
    return error.description ?? 'Unknown error';
}
class LmChatGoogleGemini {
    constructor() {
        this.description = {
            displayName: 'Google Gemini Chat Model',
            name: 'lmChatGoogleGemini',
            icon: 'file:google.svg',
            group: ['transform'],
            version: 1,
            description: 'Chat Model Google Gemini',
            defaults: {
                name: 'Google Gemini Chat Model',
            },
            codex: {
                categories: ['AI'],
                subcategories: {
                    AI: ['Language Models', 'Root Nodes'],
                    'Language Models': ['Chat Models (Recommended)'],
                },
                resources: {
                    primaryDocumentation: [
                        {
                            url: 'https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.lmchatgooglegemini/',
                        },
                    ],
                },
            },
            inputs: [],
            outputs: ["ai_languageModel"],
            outputNames: ['Model'],
            credentials: [
                {
                    name: 'googlePalmApi',
                    required: true,
                },
            ],
            requestDefaults: {
                ignoreHttpStatusErrors: true,
                baseURL: '={{ $credentials.host }}',
            },
            properties: [
                (0, sharedFields_1.getConnectionHintNoticeField)(["ai_chain", "ai_agent"]),
                {
                    displayName: 'Model',
                    name: 'modelName',
                    type: 'options',
                    description: 'The model which will generate the completion. <a href="https://developers.generativeai.google/api/rest/generativelanguage/models/list">Learn more</a>.',
                    typeOptions: {
                        loadOptions: {
                            routing: {
                                request: {
                                    method: 'GET',
                                    url: '/v1beta/models',
                                },
                                output: {
                                    postReceive: [
                                        {
                                            type: 'rootProperty',
                                            properties: {
                                                property: 'models',
                                            },
                                        },
                                        {
                                            type: 'filter',
                                            properties: {
                                                pass: "={{ !$responseItem.name.includes('embedding') }}",
                                            },
                                        },
                                        {
                                            type: 'setKeyValue',
                                            properties: {
                                                name: '={{$responseItem.name}}',
                                                value: '={{$responseItem.name}}',
                                                description: '={{$responseItem.description}}',
                                            },
                                        },
                                        {
                                            type: 'sort',
                                            properties: {
                                                key: 'name',
                                            },
                                        },
                                    ],
                                },
                            },
                        },
                    },
                    routing: {
                        send: {
                            type: 'body',
                            property: 'model',
                        },
                    },
                    default: 'models/gemini-1.0-pro',
                },
                additional_options_1.additionalOptions,
            ],
        };
    }
    async supplyData(itemIndex) {
        const credentials = await this.getCredentials('googlePalmApi');
        const modelName = this.getNodeParameter('modelName', itemIndex);
        const options = this.getNodeParameter('options', itemIndex, {
            maxOutputTokens: 1024,
            temperature: 0.7,
            topK: 40,
            topP: 0.9,
        });
        const safetySettings = this.getNodeParameter('options.safetySettings.values', itemIndex, null);
        const model = new google_genai_1.ChatGoogleGenerativeAI({
            apiKey: credentials.apiKey,
            baseUrl: credentials.host,
            modelName,
            topK: options.topK,
            topP: options.topP,
            temperature: options.temperature,
            maxOutputTokens: options.maxOutputTokens,
            safetySettings,
            callbacks: [new N8nLlmTracing_1.N8nLlmTracing(this, { errorDescriptionMapper })],
            onFailedAttempt: (0, n8nLlmFailedAttemptHandler_1.makeN8nLlmFailedAttemptHandler)(this),
        });
        return {
            response: model,
        };
    }
}
exports.LmChatGoogleGemini = LmChatGoogleGemini;
//# sourceMappingURL=LmChatGoogleGemini.node.js.map