"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ToolWorkflow = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const ToolWorkflowV1_node_1 = require("./v1/ToolWorkflowV1.node");
const ToolWorkflowV2_node_1 = require("./v2/ToolWorkflowV2.node");
class ToolWorkflow extends n8n_workflow_1.VersionedNodeType {
    constructor() {
        const baseDescription = {
            displayName: 'Call n8n Sub-Workflow Tool',
            name: 'toolWorkflow',
            icon: 'fa:network-wired',
            iconColor: 'black',
            group: ['transform'],
            description: 'Uses another n8n workflow as a tool. Allows packaging any n8n node(s) as a tool.',
            codex: {
                categories: ['AI'],
                subcategories: {
                    AI: ['Tools'],
                    Tools: ['Recommended Tools'],
                },
                resources: {
                    primaryDocumentation: [
                        {
                            url: 'https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.toolworkflow/',
                        },
                    ],
                },
            },
            defaultVersion: 2.1,
        };
        const nodeVersions = {
            1: new ToolWorkflowV1_node_1.ToolWorkflowV1(baseDescription),
            1.1: new ToolWorkflowV1_node_1.ToolWorkflowV1(baseDescription),
            1.2: new ToolWorkflowV1_node_1.ToolWorkflowV1(baseDescription),
            1.3: new ToolWorkflowV1_node_1.ToolWorkflowV1(baseDescription),
            2: new ToolWorkflowV2_node_1.ToolWorkflowV2(baseDescription),
            2.1: new ToolWorkflowV2_node_1.ToolWorkflowV2(baseDescription),
        };
        super(nodeVersions, baseDescription);
    }
}
exports.ToolWorkflow = ToolWorkflow;
//# sourceMappingURL=ToolWorkflow.node.js.map