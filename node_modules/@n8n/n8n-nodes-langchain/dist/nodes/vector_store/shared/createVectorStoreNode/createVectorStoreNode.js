"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createVectorStoreNode = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const sharedFields_1 = require("../../../../utils/sharedFields");
const operations_1 = require("./operations");
const utils_1 = require("./utils");
const createVectorStoreNode = (args) => class VectorStoreNodeType {
    constructor() {
        this.description = {
            displayName: args.meta.displayName,
            name: args.meta.name,
            description: args.meta.description,
            icon: args.meta.icon,
            iconColor: args.meta.iconColor,
            group: ['transform'],
            version: [1, 1.1],
            defaults: {
                name: args.meta.displayName,
            },
            codex: {
                categories: ['AI'],
                subcategories: {
                    AI: ['Vector Stores', 'Tools', 'Root Nodes'],
                    Tools: ['Other Tools'],
                },
                resources: {
                    primaryDocumentation: [
                        {
                            url: args.meta.docsUrl,
                        },
                    ],
                },
            },
            credentials: args.meta.credentials,
            inputs: `={{
			((parameters) => {
				const mode = parameters?.mode;
				const inputs = [{ displayName: "Embedding", type: "${"ai_embedding"}", required: true, maxConnections: 1}]

				if (mode === 'retrieve-as-tool') {
					return inputs;
				}

				if (['insert', 'load', 'update'].includes(mode)) {
					inputs.push({ displayName: "", type: "${"main"}"})
				}

				if (['insert'].includes(mode)) {
					inputs.push({ displayName: "Document", type: "${"ai_document"}", required: true, maxConnections: 1})
				}
				return inputs
			})($parameter)
		}}`,
            outputs: `={{
			((parameters) => {
				const mode = parameters?.mode ?? 'retrieve';

				if (mode === 'retrieve-as-tool') {
					return [{ displayName: "Tool", type: "${"ai_tool"}"}]
				}

				if (mode === 'retrieve') {
					return [{ displayName: "Vector Store", type: "${"ai_vectorStore"}"}]
				}
				return [{ displayName: "", type: "${"main"}"}]
			})($parameter)
		}}`,
            properties: [
                {
                    displayName: 'Operation Mode',
                    name: 'mode',
                    type: 'options',
                    noDataExpression: true,
                    default: 'retrieve',
                    options: (0, utils_1.getOperationModeOptions)(args),
                },
                {
                    ...(0, sharedFields_1.getConnectionHintNoticeField)(["ai_retriever"]),
                    displayOptions: {
                        show: {
                            mode: ['retrieve'],
                        },
                    },
                },
                {
                    displayName: 'Name',
                    name: 'toolName',
                    type: 'string',
                    default: '',
                    required: true,
                    description: 'Name of the vector store',
                    placeholder: 'e.g. company_knowledge_base',
                    validateType: 'string-alphanumeric',
                    displayOptions: {
                        show: {
                            mode: ['retrieve-as-tool'],
                        },
                    },
                },
                {
                    displayName: 'Description',
                    name: 'toolDescription',
                    type: 'string',
                    default: '',
                    required: true,
                    typeOptions: { rows: 2 },
                    description: 'Explain to the LLM what this tool does, a good, specific description would allow LLMs to produce expected results much more often',
                    placeholder: `e.g. ${args.meta.description}`,
                    displayOptions: {
                        show: {
                            mode: ['retrieve-as-tool'],
                        },
                    },
                },
                ...args.sharedFields,
                {
                    displayName: 'Embedding Batch Size',
                    name: 'embeddingBatchSize',
                    type: 'number',
                    default: 200,
                    description: 'Number of documents to embed in a single batch',
                    displayOptions: {
                        show: {
                            mode: ['insert'],
                            '@version': [{ _cnd: { gte: 1.1 } }],
                        },
                    },
                },
                ...(0, utils_1.transformDescriptionForOperationMode)(args.insertFields ?? [], 'insert'),
                {
                    displayName: 'Prompt',
                    name: 'prompt',
                    type: 'string',
                    default: '',
                    required: true,
                    description: 'Search prompt to retrieve matching documents from the vector store using similarity-based ranking',
                    displayOptions: {
                        show: {
                            mode: ['load'],
                        },
                    },
                },
                {
                    displayName: 'Limit',
                    name: 'topK',
                    type: 'number',
                    default: 4,
                    description: 'Number of top results to fetch from vector store',
                    displayOptions: {
                        show: {
                            mode: ['load', 'retrieve-as-tool'],
                        },
                    },
                },
                {
                    displayName: 'Include Metadata',
                    name: 'includeDocumentMetadata',
                    type: 'boolean',
                    default: true,
                    description: 'Whether or not to include document metadata',
                    displayOptions: {
                        show: {
                            mode: ['load', 'retrieve-as-tool'],
                        },
                    },
                },
                {
                    displayName: 'ID',
                    name: 'id',
                    type: 'string',
                    default: '',
                    required: true,
                    description: 'ID of an embedding entry',
                    displayOptions: {
                        show: {
                            mode: ['update'],
                        },
                    },
                },
                ...(0, utils_1.transformDescriptionForOperationMode)(args.loadFields ?? [], [
                    'load',
                    'retrieve-as-tool',
                ]),
                ...(0, utils_1.transformDescriptionForOperationMode)(args.retrieveFields ?? [], 'retrieve'),
                ...(0, utils_1.transformDescriptionForOperationMode)(args.updateFields ?? [], 'update'),
            ],
        };
        this.methods = args.methods;
    }
    async execute() {
        const mode = this.getNodeParameter('mode', 0);
        const embeddings = (await this.getInputConnectionData("ai_embedding", 0));
        if (mode === 'load') {
            const items = this.getInputData(0);
            const resultData = [];
            for (let itemIndex = 0; itemIndex < items.length; itemIndex++) {
                const docs = await (0, operations_1.handleLoadOperation)(this, args, embeddings, itemIndex);
                resultData.push(...docs);
            }
            return [resultData];
        }
        if (mode === 'insert') {
            const resultData = await (0, operations_1.handleInsertOperation)(this, args, embeddings);
            return [resultData];
        }
        if (mode === 'update') {
            const resultData = await (0, operations_1.handleUpdateOperation)(this, args, embeddings);
            return [resultData];
        }
        throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'Only the "load", "update" and "insert" operation modes are supported with execute');
    }
    async supplyData(itemIndex) {
        const mode = this.getNodeParameter('mode', 0);
        const embeddings = (await this.getInputConnectionData("ai_embedding", 0));
        if (mode === 'retrieve') {
            return await (0, operations_1.handleRetrieveOperation)(this, args, embeddings, itemIndex);
        }
        if (mode === 'retrieve-as-tool') {
            return await (0, operations_1.handleRetrieveAsToolOperation)(this, args, embeddings, itemIndex);
        }
        throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'Only the "retrieve" and "retrieve-as-tool" operation mode is supported to supply data');
    }
};
exports.createVectorStoreNode = createVectorStoreNode;
//# sourceMappingURL=createVectorStoreNode.js.map