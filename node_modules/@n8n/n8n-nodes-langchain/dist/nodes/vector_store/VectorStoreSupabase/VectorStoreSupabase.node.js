"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VectorStoreSupabase = void 0;
const supabase_1 = require("@langchain/community/vectorstores/supabase");
const supabase_js_1 = require("@supabase/supabase-js");
const n8n_workflow_1 = require("n8n-workflow");
const sharedFields_1 = require("../../../utils/sharedFields");
const createVectorStoreNode_1 = require("../shared/createVectorStoreNode/createVectorStoreNode");
const listSearch_1 = require("../shared/createVectorStoreNode/methods/listSearch");
const descriptions_1 = require("../shared/descriptions");
const queryNameField = {
    displayName: 'Query Name',
    name: 'queryName',
    type: 'string',
    default: 'match_documents',
    description: 'Name of the query to use for matching documents',
};
const sharedFields = [descriptions_1.supabaseTableNameRLC];
const insertFields = [
    {
        displayName: 'Options',
        name: 'options',
        type: 'collection',
        placeholder: 'Add Option',
        default: {},
        options: [queryNameField],
    },
];
const retrieveFields = [
    {
        displayName: 'Options',
        name: 'options',
        type: 'collection',
        placeholder: 'Add Option',
        default: {},
        options: [queryNameField, sharedFields_1.metadataFilterField],
    },
];
const updateFields = [...insertFields];
class VectorStoreSupabase extends (0, createVectorStoreNode_1.createVectorStoreNode)({
    meta: {
        description: 'Work with your data in Supabase Vector Store',
        icon: 'file:supabase.svg',
        displayName: 'Supabase Vector Store',
        docsUrl: 'https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.vectorstoresupabase/',
        name: 'vectorStoreSupabase',
        credentials: [
            {
                name: 'supabaseApi',
                required: true,
            },
        ],
        operationModes: ['load', 'insert', 'retrieve', 'update', 'retrieve-as-tool'],
    },
    methods: {
        listSearch: { supabaseTableNameSearch: listSearch_1.supabaseTableNameSearch },
    },
    sharedFields,
    insertFields,
    loadFields: retrieveFields,
    retrieveFields,
    updateFields,
    async getVectorStoreClient(context, filter, embeddings, itemIndex) {
        const tableName = context.getNodeParameter('tableName', itemIndex, '', {
            extractValue: true,
        });
        const options = context.getNodeParameter('options', itemIndex, {});
        const credentials = await context.getCredentials('supabaseApi');
        const client = (0, supabase_js_1.createClient)(credentials.host, credentials.serviceRole);
        return await supabase_1.SupabaseVectorStore.fromExistingIndex(embeddings, {
            client,
            tableName,
            queryName: options.queryName ?? 'match_documents',
            filter,
        });
    },
    async populateVectorStore(context, embeddings, documents, itemIndex) {
        const tableName = context.getNodeParameter('tableName', itemIndex, '', {
            extractValue: true,
        });
        const options = context.getNodeParameter('options', itemIndex, {});
        const credentials = await context.getCredentials('supabaseApi');
        const client = (0, supabase_js_1.createClient)(credentials.host, credentials.serviceRole);
        try {
            await supabase_1.SupabaseVectorStore.fromDocuments(documents, embeddings, {
                client,
                tableName,
                queryName: options.queryName ?? 'match_documents',
            });
        }
        catch (error) {
            if (error.message === 'Error inserting: undefined 404 Not Found') {
                throw new n8n_workflow_1.NodeOperationError(context.getNode(), `Table ${tableName} not found`, {
                    itemIndex,
                    description: 'Please check that the table exists in your vector store',
                });
            }
            else {
                throw new n8n_workflow_1.NodeOperationError(context.getNode(), error, {
                    itemIndex,
                });
            }
        }
    },
}) {
}
exports.VectorStoreSupabase = VectorStoreSupabase;
//# sourceMappingURL=VectorStoreSupabase.node.js.map