import { AiAssistantConfig } from './configs/aiAssistant.config';
import { CacheConfig } from './configs/cache.config';
import { CredentialsConfig } from './configs/credentials.config';
import { DatabaseConfig } from './configs/database.config';
import { DiagnosticsConfig } from './configs/diagnostics.config';
import { EndpointsConfig } from './configs/endpoints.config';
import { EventBusConfig } from './configs/event-bus.config';
import { ExecutionsConfig } from './configs/executions.config';
import { ExternalHooksConfig } from './configs/external-hooks.config';
import { ExternalSecretsConfig } from './configs/external-secrets.config';
import { ExternalStorageConfig } from './configs/external-storage.config';
import { GenericConfig } from './configs/generic.config';
import { LicenseConfig } from './configs/license.config';
import { LoggingConfig } from './configs/logging.config';
import { MultiMainSetupConfig } from './configs/multi-main-setup.config';
import { NodesConfig } from './configs/nodes.config';
import { PartialExecutionsConfig } from './configs/partial-executions.config';
import { PublicApiConfig } from './configs/public-api.config';
import { TaskRunnersConfig } from './configs/runners.config';
import { ScalingModeConfig } from './configs/scaling-mode.config';
import { SecurityConfig } from './configs/security.config';
import { SentryConfig } from './configs/sentry.config';
import { TagsConfig } from './configs/tags.config';
import { TemplatesConfig } from './configs/templates.config';
import { UserManagementConfig } from './configs/user-management.config';
import { VersionNotificationsConfig } from './configs/version-notifications.config';
import { WorkflowsConfig } from './configs/workflows.config';
export { Config, Env, Nested } from './decorators';
export { TaskRunnersConfig } from './configs/runners.config';
export { SecurityConfig } from './configs/security.config';
export { ExecutionsConfig } from './configs/executions.config';
export { S3Config } from './configs/external-storage.config';
export { LOG_SCOPES } from './configs/logging.config';
export type { LogScope } from './configs/logging.config';
export { WorkflowsConfig } from './configs/workflows.config';
export declare class GlobalConfig {
    database: DatabaseConfig;
    credentials: CredentialsConfig;
    userManagement: UserManagementConfig;
    versionNotifications: VersionNotificationsConfig;
    publicApi: PublicApiConfig;
    externalHooks: ExternalHooksConfig;
    externalSecrets: ExternalSecretsConfig;
    templates: TemplatesConfig;
    eventBus: EventBusConfig;
    nodes: NodesConfig;
    externalStorage: ExternalStorageConfig;
    workflows: WorkflowsConfig;
    sentry: SentryConfig;
    path: string;
    host: string;
    port: number;
    listen_address: string;
    protocol: 'http' | 'https';
    endpoints: EndpointsConfig;
    cache: CacheConfig;
    queue: ScalingModeConfig;
    logging: LoggingConfig;
    taskRunners: TaskRunnersConfig;
    multiMainSetup: MultiMainSetupConfig;
    generic: GenericConfig;
    license: LicenseConfig;
    security: SecurityConfig;
    executions: ExecutionsConfig;
    diagnostics: DiagnosticsConfig;
    aiAssistant: AiAssistantConfig;
    tags: TagsConfig;
    partialExecutions: PartialExecutionsConfig;
}
