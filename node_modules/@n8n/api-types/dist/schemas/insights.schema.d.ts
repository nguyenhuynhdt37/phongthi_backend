import { z } from 'zod';
export declare const insightsSummaryTypeSchema: z.ZodEnum<["total", "failed", "failureRate", "timeSaved", "averageRunTime"]>;
export type InsightsSummaryType = z.infer<typeof insightsSummaryTypeSchema>;
export declare const insightsSummaryUnitSchema: z.ZodEnum<["count", "ratio", "time"]>;
export type InsightsSummaryUnit = z.infer<typeof insightsSummaryUnitSchema>;
export declare const insightsSummaryDataSchemas: {
    readonly total: z.ZodObject<{
        value: z.ZodNumber;
        deviation: z.ZodNumber;
        unit: z.ZodLiteral<"count">;
    }, "strip", z.ZodTypeAny, {
        value: number;
        deviation: number;
        unit: "count";
    }, {
        value: number;
        deviation: number;
        unit: "count";
    }>;
    readonly failed: z.ZodObject<{
        value: z.ZodNumber;
        deviation: z.ZodNumber;
        unit: z.ZodLiteral<"count">;
    }, "strip", z.ZodTypeAny, {
        value: number;
        deviation: number;
        unit: "count";
    }, {
        value: number;
        deviation: number;
        unit: "count";
    }>;
    readonly failureRate: z.ZodObject<{
        value: z.ZodNumber;
        deviation: z.ZodNumber;
        unit: z.ZodLiteral<"ratio">;
    }, "strip", z.ZodTypeAny, {
        value: number;
        deviation: number;
        unit: "ratio";
    }, {
        value: number;
        deviation: number;
        unit: "ratio";
    }>;
    readonly timeSaved: z.ZodObject<{
        value: z.ZodNumber;
        deviation: z.ZodNumber;
        unit: z.ZodLiteral<"time">;
    }, "strip", z.ZodTypeAny, {
        value: number;
        deviation: number;
        unit: "time";
    }, {
        value: number;
        deviation: number;
        unit: "time";
    }>;
    readonly averageRunTime: z.ZodObject<{
        value: z.ZodNumber;
        deviation: z.ZodNumber;
        unit: z.ZodLiteral<"time">;
    }, "strip", z.ZodTypeAny, {
        value: number;
        deviation: number;
        unit: "time";
    }, {
        value: number;
        deviation: number;
        unit: "time";
    }>;
};
export declare const insightsSummarySchema: z.ZodObject<{
    readonly total: z.ZodObject<{
        value: z.ZodNumber;
        deviation: z.ZodNumber;
        unit: z.ZodLiteral<"count">;
    }, "strip", z.ZodTypeAny, {
        value: number;
        deviation: number;
        unit: "count";
    }, {
        value: number;
        deviation: number;
        unit: "count";
    }>;
    readonly failed: z.ZodObject<{
        value: z.ZodNumber;
        deviation: z.ZodNumber;
        unit: z.ZodLiteral<"count">;
    }, "strip", z.ZodTypeAny, {
        value: number;
        deviation: number;
        unit: "count";
    }, {
        value: number;
        deviation: number;
        unit: "count";
    }>;
    readonly failureRate: z.ZodObject<{
        value: z.ZodNumber;
        deviation: z.ZodNumber;
        unit: z.ZodLiteral<"ratio">;
    }, "strip", z.ZodTypeAny, {
        value: number;
        deviation: number;
        unit: "ratio";
    }, {
        value: number;
        deviation: number;
        unit: "ratio";
    }>;
    readonly timeSaved: z.ZodObject<{
        value: z.ZodNumber;
        deviation: z.ZodNumber;
        unit: z.ZodLiteral<"time">;
    }, "strip", z.ZodTypeAny, {
        value: number;
        deviation: number;
        unit: "time";
    }, {
        value: number;
        deviation: number;
        unit: "time";
    }>;
    readonly averageRunTime: z.ZodObject<{
        value: z.ZodNumber;
        deviation: z.ZodNumber;
        unit: z.ZodLiteral<"time">;
    }, "strip", z.ZodTypeAny, {
        value: number;
        deviation: number;
        unit: "time";
    }, {
        value: number;
        deviation: number;
        unit: "time";
    }>;
}, "strict", z.ZodTypeAny, {
    total: {
        value: number;
        deviation: number;
        unit: "count";
    };
    failed: {
        value: number;
        deviation: number;
        unit: "count";
    };
    failureRate: {
        value: number;
        deviation: number;
        unit: "ratio";
    };
    timeSaved: {
        value: number;
        deviation: number;
        unit: "time";
    };
    averageRunTime: {
        value: number;
        deviation: number;
        unit: "time";
    };
}, {
    total: {
        value: number;
        deviation: number;
        unit: "count";
    };
    failed: {
        value: number;
        deviation: number;
        unit: "count";
    };
    failureRate: {
        value: number;
        deviation: number;
        unit: "ratio";
    };
    timeSaved: {
        value: number;
        deviation: number;
        unit: "time";
    };
    averageRunTime: {
        value: number;
        deviation: number;
        unit: "time";
    };
}>;
export type InsightsSummary = z.infer<typeof insightsSummarySchema>;
