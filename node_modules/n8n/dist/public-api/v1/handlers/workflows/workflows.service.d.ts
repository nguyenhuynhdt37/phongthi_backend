import type { Scope } from '@n8n/permissions';
import type { WorkflowId } from 'n8n-workflow';
import type { Project } from '../../../../databases/entities/project';
import { SharedWorkflow, type WorkflowSharingRole } from '../../../../databases/entities/shared-workflow';
import type { User } from '../../../../databases/entities/user';
import { WorkflowEntity } from '../../../../databases/entities/workflow-entity';
export declare function getSharedWorkflowIds(user: User, scopes: Scope[], projectId?: string): Promise<string[]>;
export declare function getSharedWorkflow(user: User, workflowId?: string | undefined): Promise<SharedWorkflow | null>;
export declare function getWorkflowById(id: string): Promise<WorkflowEntity | null>;
export declare function createWorkflow(workflow: WorkflowEntity, user: User, personalProject: Project, role: WorkflowSharingRole): Promise<WorkflowEntity>;
export declare function setWorkflowAsActive(workflowId: WorkflowId): Promise<void>;
export declare function setWorkflowAsInactive(workflowId: WorkflowId): Promise<import("@n8n/typeorm").UpdateResult>;
export declare function deleteWorkflow(workflow: WorkflowEntity): Promise<WorkflowEntity>;
export declare function updateWorkflow(workflowId: string, updateData: WorkflowEntity): Promise<import("@n8n/typeorm").UpdateResult>;
export declare function parseTagNames(tags: string): string[];
export declare function getWorkflowTags(workflowId: string): Promise<import("../../../../databases/entities/tag-entity").TagEntity[]>;
export declare function updateTags(workflowId: string, newTags: string[]): Promise<any>;
