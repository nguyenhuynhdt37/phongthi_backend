"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestMetricsController = void 0;
const express_1 = __importDefault(require("express"));
const test_metric_repository_ee_1 = require("../databases/repositories/test-metric.repository.ee");
const decorators_1 = require("../decorators");
const not_found_error_1 = require("../errors/response-errors/not-found.error");
const metric_schema_1 = require("../evaluation.ee/metric.schema");
const workflows_service_1 = require("../public-api/v1/handlers/workflows/workflows.service");
const telemetry_1 = require("../telemetry");
const test_definition_service_ee_1 = require("./test-definition.service.ee");
let TestMetricsController = class TestMetricsController {
    constructor(testDefinitionService, testMetricRepository, telemetry) {
        this.testDefinitionService = testDefinitionService;
        this.testMetricRepository = testMetricRepository;
        this.telemetry = telemetry;
    }
    async getTestDefinition(req) {
        const { testDefinitionId } = req.params;
        const userAccessibleWorkflowIds = await (0, workflows_service_1.getSharedWorkflowIds)(req.user, ['workflow:read']);
        const testDefinition = await this.testDefinitionService.findOne(testDefinitionId, userAccessibleWorkflowIds);
        if (!testDefinition)
            throw new not_found_error_1.NotFoundError('Test definition not found');
        return testDefinition;
    }
    async getMany(req) {
        const { testDefinitionId } = req.params;
        await this.getTestDefinition(req);
        return await this.testMetricRepository.find({
            where: { testDefinition: { id: testDefinitionId } },
        });
    }
    async getOne(req) {
        const { id: metricId, testDefinitionId } = req.params;
        await this.getTestDefinition(req);
        const metric = await this.testMetricRepository.findOne({
            where: { id: metricId, testDefinition: { id: testDefinitionId } },
        });
        if (!metric)
            throw new not_found_error_1.NotFoundError('Metric not found');
        return metric;
    }
    async create(req, res) {
        const bodyParseResult = metric_schema_1.testMetricCreateRequestBodySchema.safeParse(req.body);
        if (!bodyParseResult.success) {
            res.status(400).json({ errors: bodyParseResult.error.errors });
            return;
        }
        const testDefinition = await this.getTestDefinition(req);
        const metric = this.testMetricRepository.create({
            ...req.body,
            testDefinition,
        });
        return await this.testMetricRepository.save(metric);
    }
    async patch(req, res) {
        const { id: metricId, testDefinitionId } = req.params;
        const bodyParseResult = metric_schema_1.testMetricPatchRequestBodySchema.safeParse(req.body);
        if (!bodyParseResult.success) {
            res.status(400).json({ errors: bodyParseResult.error.errors });
            return;
        }
        await this.getTestDefinition(req);
        const metric = await this.testMetricRepository.findOne({
            where: { id: metricId, testDefinition: { id: testDefinitionId } },
        });
        if (!metric)
            throw new not_found_error_1.NotFoundError('Metric not found');
        const updateResult = await this.testMetricRepository.update(metricId, bodyParseResult.data);
        if (updateResult.affected === 1 && metric.name !== bodyParseResult.data.name) {
            this.telemetry.track('User added metrics to test', {
                metric_id: metricId,
                metric_name: bodyParseResult.data.name,
                test_id: testDefinitionId,
            });
        }
        return await this.testMetricRepository.findOneBy({ id: metricId });
    }
    async delete(req) {
        const { id: metricId, testDefinitionId } = req.params;
        await this.getTestDefinition(req);
        const metric = await this.testMetricRepository.findOne({
            where: { id: metricId, testDefinition: { id: testDefinitionId } },
        });
        if (!metric)
            throw new not_found_error_1.NotFoundError('Metric not found');
        await this.testMetricRepository.delete(metricId);
        return { success: true };
    }
};
exports.TestMetricsController = TestMetricsController;
__decorate([
    (0, decorators_1.Get)('/:testDefinitionId/metrics'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestMetricsController.prototype, "getMany", null);
__decorate([
    (0, decorators_1.Get)('/:testDefinitionId/metrics/:id'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestMetricsController.prototype, "getOne", null);
__decorate([
    (0, decorators_1.Post)('/:testDefinitionId/metrics'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", Promise)
], TestMetricsController.prototype, "create", null);
__decorate([
    (0, decorators_1.Patch)('/:testDefinitionId/metrics/:id'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", Promise)
], TestMetricsController.prototype, "patch", null);
__decorate([
    (0, decorators_1.Delete)('/:testDefinitionId/metrics/:id'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TestMetricsController.prototype, "delete", null);
exports.TestMetricsController = TestMetricsController = __decorate([
    (0, decorators_1.RestController)('/evaluation/test-definitions'),
    __metadata("design:paramtypes", [test_definition_service_ee_1.TestDefinitionService,
        test_metric_repository_ee_1.TestMetricRepository,
        telemetry_1.Telemetry])
], TestMetricsController);
//# sourceMappingURL=metrics.controller.js.map