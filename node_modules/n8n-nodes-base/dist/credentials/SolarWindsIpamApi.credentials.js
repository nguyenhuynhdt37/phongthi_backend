"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SolarWindsIpamApi = void 0;
class SolarWindsIpamApi {
    constructor() {
        this.name = 'solarWindsIpamApi';
        this.displayName = 'SolarWinds IPAM';
        this.documentationUrl = 'solarwindsipam';
        this.icon = {
            light: 'file:icons/SolarWindsIpam.svg',
            dark: 'file:icons/SolarWindsIpam.svg',
        };
        this.httpRequestNode = {
            name: 'SolarWinds IPAM',
            docsUrl: 'https://www.solarwinds.com/ip-address-manager',
            apiBaseUrlPlaceholder: 'https://your-ipam-server',
        };
        this.properties = [
            {
                displayName: 'Base URL',
                name: 'url',
                required: true,
                type: 'string',
                default: '',
                placeholder: 'https://your-ipam-server',
                description: 'The base URL of your SolarWinds IPAM server.',
            },
            {
                displayName: 'Username',
                name: 'username',
                required: true,
                type: 'string',
                default: '',
                description: 'The username for SolarWinds IPAM API.',
            },
            {
                displayName: 'Password',
                name: 'password',
                required: true,
                type: 'string',
                typeOptions: { password: true },
                default: '',
                description: 'The password for SolarWinds IPAM API.',
            },
        ];
        this.authenticate = {
            type: 'generic',
            properties: {
                auth: {
                    username: '={{$credentials.username}}',
                    password: '={{$credentials.password}}',
                },
            },
        };
        this.test = {
            request: {
                baseURL: '={{$credentials.url}}'.replace(/\/$/, ''),
                url: '/SolarWinds/InformationService/v3/Json/Query',
                method: 'GET',
                qs: {
                    query: 'SELECT TOP 1 AccountID FROM IPAM.AccountRoles',
                },
                skipSslCertificateValidation: true,
            },
            rules: [
                {
                    type: 'responseCode',
                    properties: {
                        value: 403,
                        message: 'Connection failed: Invalid credentials or unreachable server',
                    },
                },
            ],
        };
    }
}
exports.SolarWindsIpamApi = SolarWindsIpamApi;
//# sourceMappingURL=SolarWindsIpamApi.credentials.js.map